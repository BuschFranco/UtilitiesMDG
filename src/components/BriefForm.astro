---
import type { Translations } from '../i18n';

interface Props {
  translations: Translations;
  currentLang: string;
}

const { translations: t, currentLang } = Astro.props;
---

<div class="brief-form-container">
  <div class="card scroll-animate">
    <form id="briefForm" class="brief-form scroll-animate">
      <!-- Informaci√≥n del Formulario -->
      <div class="form-info-banner">
        <p class="form-info-text">
          üìã <span set:html={t.formInfoBanner.replace('Landing ID', '<strong>Landing ID</strong>')}></span>
        </p>
      </div>
      
      <!-- Selector de Tipo de Operaci√≥n -->
      <section class="form-section scroll-animate no-counter">
        <h2 class="section-title no-counter">{t.operationType}</h2>
        <div class="form-group">
          <div class="operation-type-selector">
            <label class="radio-option">
              <input type="radio" name="operation_type" value="new" id="operation-new" checked>
              <span class="radio-label">{t.newLP}</span>
            </label>
            <label class="radio-option">
              <input type="radio" name="operation_type" value="modify" id="operation-modify">
              <span class="radio-label">{t.modifyLP}</span>
            </label>
          </div>
        </div>
      </section>
      
      <!-- Campo DevID para Modificar LP -->
      <section class="form-section scroll-animate no-counter" id="devid-section" style="display: none;">
        <div class="form-group">
          <label for="existing_devid" class="form-label">{t.existingDevId}:</label>
          <div class="devid-input-group">
            <input type="text" id="existing_devid" name="existing_devid" class="form-input" placeholder={t.existingDevIdPlaceholder}>
            <button type="button" id="load-data-btn" class="load-data-btn">
              <span id="loadDataText">{t.loadExistingData}</span>
              <span id="loadDataSpinner" class="loading" style="display: none; margin-left: 0.5rem;"></span>
            </button>
          </div>
          <div id="devid-status" class="devid-status"></div>
        </div>
      </section>
      
      <!-- Contenedor del Formulario Principal -->
      <div id="main-form-container">
      
      <!-- Informaci√≥n del Solicitante -->
      <section class="form-section scroll-animate no-counter">
        <h2 class="section-title no-counter">{t.applicantInfo}</h2>
        <div class="form-group">
          <label for="requester_email" class="form-label">{t.requesterName}:</label>
          <input type="email" id="requester_email" name="requester_email" class="form-input" placeholder={t.requesterNamePlaceholder} required>
        </div>
        
        <!-- Campo para mostrar Jira Task Key (solo lectura) -->
        <div class="form-group" id="jira-task-key-group" style="display: none;">
          <label for="jira_task_key" class="form-label">Jira Task:</label>
          <input type="text" id="jira_task_key" name="jira_task_key" class="form-input" readonly style="background-color: #f5f5f5; cursor: not-allowed;">
        </div>

      </section>



      <!-- 1. Landing Information -->
      <section class="form-section scroll-animate">
        <h2 class="section-title">{t.landingInfo}</h2>
        <div class="form-group">
          <label for="product" class="form-label">{t.product}:</label>
          <input type="text" id="product" name="product" class="form-input" placeholder={t.productPlaceholder} required>
        </div>
        <div class="form-group">
          <label for="flow_type" class="form-label">{t.selectFlowType}:</label>
          <select id="flow_type" name="flow_type" class="form-select" required>
            <option value="">{t.selectFlowType}</option>
            <option value="one_click">ONE CLICK</option>
            <option value="msisdn_pin">MSISDN + PIN</option>
            <option value="he_pin">HE + PIN</option>
            <option value="he">HE</option>
          </select>
        </div>
        <div class="form-group">
          <label for="country" class="form-label">{t.country}:</label>
          <input type="text" id="country" name="country" class="form-input" placeholder={t.countryPlaceholder} required>
        </div>
        <div class="form-group">
          <label for="carriers" class="form-label">{t.carriers}:</label>
          <input type="text" id="carriers" name="carriers" class="form-input" placeholder={t.carriersPlaceholder} required>
        </div>
        <div class="form-group">
          <label class="form-label">{t.trafficOrigin}:</label>
          <input type="text" id="traffic_origin" name="traffic_origin" class="form-input" placeholder={t.trafficOriginPlaceholder}>
        </div>
        <div class="form-group">
          <label for="plan_type" class="form-label">{t.planType}:</label>
          <input type="text" id="plan_type" name="plan_type" class="form-input" placeholder="Ej: DAILY, WEEKLY, MONTHLY" required>
        </div>
      </section>

      <!-- 2. Content and Copies -->
      <section class="form-section scroll-animate">
        <h2 class="section-title"> {t.contentCopies}</h2>
        <div class="form-group">
          <label for="copies" class="form-label">{t.copies}:</label>
          <textarea id="copies" name="copies" class="form-textarea" rows="6" placeholder={t.copiesPlaceholder} required></textarea>
        </div>
        <div class="form-group">
          <label class="form-label">{t.links}:</label>
          <div id="tc-links-container">
            <div class="tc-link-item">
              <div class="tc-link-row">
                <input type="url" name="tc_links[]" class="form-input tc-link-url" placeholder={t.tcLinkUrlPlaceholder}>
                <input type="text" name="tc_descriptions[]" class="form-input tc-link-description" placeholder={t.linkDescriptionPlaceholder}>
                <button type="button" class="btn-add-tc" onclick="addTcLink()">+</button>
              </div>
            </div>
          </div>
        </div>
        <div class="form-group">
          <label for="languages" class="form-label">{t.languages}:</label>
          <input type="text" id="languages" name="languages" class="form-input" placeholder={t.languagesPlaceholder} required>
        </div>
        <div class="form-group">
          <label for="subscription_keywords" class="form-label">{t.subscriptionKeywords}:</label>
          <input type="text" id="subscription_keywords" name="subscription_keywords" class="form-input" placeholder={t.subscriptionKeywordsPlaceholder} required>
        </div>
        <div class="form-group">
          <label for="price_text" class="form-label">{t.priceText}/pricepoint:</label>
          <input type="text" id="price_text" name="price_text" class="form-input" placeholder={t.priceTextPlaceholder} required>
        </div>
      </section>

      <!-- 3. Graphic Resources -->
      <section class="form-section scroll-animate">
        <h2 class="section-title"> {t.graphicResources}</h2>
        <div class="form-info-note">
          <p class="info-note-text">
            üí° <span set:html={t.juliNote}></span>
            <a href="mailto:julieta@mediadigitalgroup.com" target="_blank" class="contact-juli-btn">üìß {t.contactJuli}</a>
          </p>
        </div>
        <div class="form-group">
          <label for="images" class="form-label">{t.imagesAndBanners}:</label>
          <div class="file-upload-container">
            <input type="file" id="images" name="images" class="file-input" multiple accept="image/*">
            <label for="images" class="file-upload-label">
              <span class="upload-icon">üìÅ</span>
              <span class="upload-text">{t.selectImages}</span>
            </label>
            <div id="images-status" class="file-status" style="margin-top: 10px; color: #059669; font-weight: 500; display: none;"></div>
            <div class="file-list" id="images-list"></div>
          </div>
        </div>
        <div class="form-group">
          <label for="logos" class="form-label">{t.logos} ({t.optional}):</label>
          <div class="file-upload-container">
            <input type="file" id="logos" name="logos" class="file-input" multiple accept="image/*">
            <label for="logos" class="file-upload-label">
              <span class="upload-icon">üìÅ</span>
              <span class="upload-text">{t.selectLogos}</span>
            </label>
            <div class="file-list" id="logos-list"></div>
          </div>
        </div>
      </section>

      <!-- 4. Technical Functionalities -->
      <section class="form-section scroll-animate">
        <h2 class="section-title"> {t.technicalFunctionalities}</h2>
        

        
        <div class="form-group">
          <label for="special_functionalities" class="form-label">{t.specialFunctionalities} ({t.optional}):</label>
          <textarea id="special_functionalities" name="special_functionalities" class="form-textarea" rows="4" placeholder={t.specialFunctionalitiesPlaceholder}></textarea>
        </div>
      </section>

      <!-- 5. Colores -->
      <section class="form-section scroll-animate">
        <h2 class="section-title">{t.colors}</h2>
        <div class="form-group">
          <label class="form-label">{t.colors}:</label>
          <div id="colors-container">
            <div class="color-item">
              <div class="color-row">
                <input type="color" name="colors[]" class="color-picker" value="#000000">
                <input type="text" name="color_descriptions[]" class="color-description" placeholder={t.colorDescriptionPlaceholder}>
                <button type="button" class="btn-add-color" onclick="addColor()">+</button>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- 6. Referencias -->
      <section class="form-section scroll-animate">
        <h2 class="section-title">{t.references}</h2>
        <div class="form-group">
          <label for="reference_url" class="form-label">{t.referenceUrl}:</label>
          <input type="url" id="reference_url" name="reference_url" class="form-input" placeholder={t.referenceUrlPlaceholder}>
        </div>
        <div class="form-group">
          <label for="reference_image" class="form-label">{t.referenceImage}:</label>
          <div class="file-upload-container">
            <input type="file" id="reference_image" name="reference_image" class="file-input" accept="image/*">
            <label for="reference_image" class="file-upload-label">
              <span class="upload-icon">üñºÔ∏è</span>
              <span class="upload-text">{t.selectReferenceImage}</span>
            </label>
            <div class="file-list" id="reference-image-list"></div>
          </div>
        </div>
        <div class="form-group">
          <label for="guidelines_document" class="form-label">{t.guidelinesDocument}:</label>
          <div class="file-upload-container">
            <input type="file" id="guidelines_document" name="guidelines_document" class="file-input" accept=".pdf,.doc,.docx,.txt">
            <label for="guidelines_document" class="file-upload-label">
              <span class="upload-icon">üìÑ</span>
              <span class="upload-text">{t.selectDocument}</span>
            </label>
            <div class="file-list" id="guidelines-document-list"></div>
          </div>
        </div>
      </section>



      <!-- Franco Notification -->
      <div class="franco-notification scroll-animate">
        <p class="franco-text">
          üìß {t.francoNotification}
        </p>
      </div>

      </div> <!-- Cierre del contenedor del formulario principal -->
      
      <!-- Submit Buttons -->
      <div class="form-actions scroll-animate">
        <button type="button" class="btn btn-secondary" id="saveBtn">
          <span id="saveText">{t.saveChanges}</span>
          <span id="saveLoadingSpinner" class="loading" style="display: none; margin-left: 0.5rem;"></span>
        </button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
          <span id="submitText">{t.generateBrief}</span>
          <span id="loadingSpinner" class="loading" style="display: none; margin-left: 0.5rem;"></span>
        </button>
      </div>
    </form>

    <!-- Success/Error Messages -->
    <div id="alertContainer" style="display: none;"></div>
  </div>
</div>

<style>
  .brief-form-container {
    min-height: 100vh;
    padding: 2rem 0;
    position: relative;
    overflow-x: hidden;
  }

  .brief-form-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
  }

  .card {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(139, 69, 219, 0.15);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(139, 69, 219, 0.2);
    position: relative;
    z-index: 1;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .form-title {
    font-size: 2rem;
    font-weight: 700;
    text-align: center;
    margin-bottom: 0.5rem;
    color: #7c3aed;
    text-shadow: 0 2px 4px rgba(124, 58, 237, 0.1);
  }

  .form-subtitle {
    text-align: center;
    color: #6b7280;
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }

  .brief-form {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    width: 100%;
    max-width: 100%;
  }

  .form-section {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 15px;
    padding: 1.5rem;
    border-left: 4px solid #8b45db;
    box-shadow: 0 4px 15px rgba(139, 69, 219, 0.1);
    transition: all 0.3s ease;
    opacity: 0;
    animation: slideInLeft 0.6s ease-out forwards;
    position: relative;
    overflow: hidden;
  }

  .form-section:nth-child(1) { animation-delay: 0.1s; }
  .form-section:nth-child(2) { animation-delay: 0.2s; }
  .form-section:nth-child(3) { animation-delay: 0.3s; }
  .form-section:nth-child(4) { animation-delay: 0.4s; }
  .form-section:nth-child(5) { animation-delay: 0.5s; }

  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .form-section:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(139, 69, 219, 0.2);
  }

  /* Operation Type Selector Styles */
  .operation-selector {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    margin-bottom: 2rem;
  }

  .operation-selector h3 {
    color: white;
    margin-bottom: 1rem;
  }

  .radio-group {
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  .radio-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid transparent;
  }

  .radio-option:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
  }

  .radio-option input[type="radio"]:checked + label {
    font-weight: bold;
  }

  .radio-option:has(input[type="radio"]:checked) {
    background: rgba(255, 255, 255, 0.3);
    border-color: rgba(255, 255, 255, 0.5);
  }

  /* DevID Section Styles */
  .devid-section {
    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
    border-left-color: #f59e0b;
  }

  .devid-input-group {
    display: flex;
    gap: 1rem;
    align-items: flex-end;
  }

  .devid-input-group .form-group {
    flex: 1;
    margin-bottom: 0;
  }

  .load-btn {
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .load-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(245, 158, 11, 0.3);
  }

  .load-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  /* DevID Status Styles */
  .devid-status {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 12px;
    font-weight: 500;
    text-align: center;
    transition: all 0.3s ease;
    min-height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
  }

  .devid-status.success {
    background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
    color: #065f46;
    border: 1px solid #10b981;
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.15);
  }

  .devid-status.error {
    background: linear-gradient(135deg, #fee2e2 0%, #fca5a5 100%);
    color: #991b1b;
    border: 1px solid #ef4444;
    box-shadow: 0 4px 12px rgba(239, 68, 68, 0.15);
  }

  .devid-status.loading {
    background: linear-gradient(135deg, #dbeafe 0%, #93c5fd 100%);
    color: #1e40af;
    border: 1px solid #3b82f6;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
    position: relative;
  }

  /* Loading Spinner for DevID Status */
  .devid-loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(30, 64, 175, 0.3);
    border-top: 2px solid #1e40af;
    border-radius: 50%;
    animation: devid-spin 1s linear infinite;
    flex-shrink: 0;
  }

  @keyframes devid-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Success and Error Icons */
  .devid-status-icon {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 12px;
    flex-shrink: 0;
  }

  .devid-status.success .devid-status-icon {
    background: #10b981;
    color: white;
  }

  .devid-status.error .devid-status-icon {
    background: #ef4444;
    color: white;
  }

  /* Load Data Button Improved Styles */
  .load-data-btn {
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 50%, #6d28d9 100%);
    color: white;
    border: none;
    padding: 0.875rem 1.75rem;
    border-radius: 12px;
    cursor: pointer;
    font-weight: 600;
    font-size: 0.95rem;
    letter-spacing: 0.025em;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    white-space: nowrap;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 14px 0 rgba(139, 92, 246, 0.25);
    min-height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .load-data-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .load-data-btn:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 8px 25px 0 rgba(139, 92, 246, 0.4);
    background: linear-gradient(135deg, #9333ea 0%, #8b5cf6 50%, #7c3aed 100%);
  }

  .load-data-btn:hover::before {
    left: 100%;
  }

  .load-data-btn:active {
    transform: translateY(-1px) scale(1.01);
    box-shadow: 0 4px 15px 0 rgba(139, 92, 246, 0.3);
  }

  .load-data-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: 0 2px 8px 0 rgba(139, 92, 246, 0.15);
  }

  .load-data-btn:disabled:hover {
    transform: none;
    box-shadow: 0 2px 8px 0 rgba(139, 92, 246, 0.15);
  }
    border-left-color: #a855f7;
  }

  .form-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, #8b45db, #a855f7, #8b45db);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .form-section:hover::before {
    opacity: 1;
  }

  .section-title {
    color: #7c3aed;
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    position: relative;
  }

  .section-title::before {
    content: counter(section-counter);
    counter-increment: section-counter;
    background: linear-gradient(135deg, #8b45db, #7c3aed);
    color: white;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    font-weight: 600;
    box-shadow: 0 2px 8px rgba(139, 69, 219, 0.3);
    flex-shrink: 0;
  }

  .section-title.no-counter::before {
    display: none;
  }

  .form-section.no-counter {
    counter-increment: none;
  }

  .brief-form {
    counter-reset: section-counter;
  }

  /* Form Info Banner Styles */
  .form-info-banner {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
    border: 2px solid #3b82f6;
    border-radius: 12px;
    padding: 1.25rem;
    margin-bottom: 2rem;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);
  }

  .form-info-text {
    margin: 0;
    color: #1e40af;
    font-size: 1rem;
    line-height: 1.5;
    text-align: center;
    font-weight: 500;
  }

  .form-info-text strong {
    color: #1d4ed8;
    font-weight: 700;
  }

  /* Form Info Note Styles */
  .form-info-note {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    border: 2px solid #f59e0b;
    border-radius: 10px;
    padding: 1rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 8px rgba(245, 158, 11, 0.1);
  }

  .info-note-text {
    margin: 0;
    color: #92400e;
    font-size: 0.95rem;
    line-height: 1.4;
    font-weight: 500;
  }

  .info-note-text strong {
    color: #78350f;
    font-weight: 700;
  }

  /* Dev ID Info Styles */
  .dev-id-info {
    background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
    border: 2px solid #22c55e;
    border-radius: 12px;
    padding: 1.25rem;
    box-shadow: 0 4px 12px rgba(34, 197, 94, 0.1);
  }

  .dev-id-text {
    margin: 0;
    color: #15803d;
    font-size: 1rem;
    line-height: 1.5;
    text-align: center;
    font-weight: 500;
  }

  .jira-link {
    color: #059669;
    text-decoration: underline;
    font-weight: 600;
    transition: color 0.2s ease;
  }

  .jira-link:hover {
    color: #047857;
    text-decoration: none;
  }

  /* Franco Notification Styles */
  .franco-notification {
    background: linear-gradient(135deg, #fef7ff 0%, #f3e8ff 100%);
    border: 1px solid #a855f7;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 6px rgba(168, 85, 247, 0.08);
  }

  .franco-text {
    margin: 0;
    color: #7c3aed;
    font-size: 0.875rem;
    line-height: 1.4;
    text-align: center;
    font-weight: 500;
    font-style: italic;
  }





  .contact-juli-btn {
    display: inline-block;
    margin-left: 0.75rem;
    padding: 0.4rem 0.8rem;
    background: linear-gradient(135deg, #f59e0b, #d97706);
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-size: 0.85rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(245, 158, 11, 0.3);
    border: 1px solid black;
  }

  .contact-juli-btn:hover {
    background: linear-gradient(135deg, #d97706, #b45309);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(245, 158, 11, 0.4);
    color: white;
    text-decoration: none;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group:last-child {
    margin-bottom: 0;
  }

  .form-label {
    display: block;
    margin-bottom: 0.5rem;
    color: #4c1d95;
    font-weight: 500;
    font-size: 0.95rem;
  }

  .form-input,
  .form-select,
  .form-textarea {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid #e5e7eb;
    border-radius: 10px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.9);
    box-sizing: border-box;
    font-family: inherit;
  }

  .form-input:focus,
  .form-select:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #8b45db;
    box-shadow: 0 0 0 3px rgba(139, 69, 219, 0.1);
    transform: translateY(-1px);
    background: rgba(255, 255, 255, 1);
  }

  .form-textarea {
    min-height: 120px;
    resize: vertical;
  }

  .radio-group {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .radio-group.vertical {
    flex-direction: column;
    gap: 0.75rem;
  }

  .radio-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.9);
    font-weight: 500;
    position: relative;
    overflow: hidden;
  }

  .radio-option::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(139, 69, 219, 0.1), transparent);
    transition: left 0.5s ease;
  }

  .radio-option:hover {
    border-color: #8b45db;
    background: rgba(139, 69, 219, 0.05);
    transform: translateY(-1px);
  }

  .radio-option:hover::before {
    left: 100%;
  }

  /* T&C Links Styles */
  .tc-link-item {
    margin-bottom: 15px !important;
  }

  .tc-link-row {
    display: flex !important;
    flex-direction: row !important;
    align-items: center !important;
    gap: 10px !important;
    width: 100% !important;
    flex-wrap: nowrap !important;
  }

  .tc-link-row input.tc-link-url,
  .tc-link-row input.form-input.tc-link-url {
    flex: 2 !important;
    height: 50px !important;
    min-width: 0 !important;
    width: auto !important;
    max-width: none !important;
    box-sizing: border-box !important;
  }

  .tc-link-row input.tc-link-description,
  .tc-link-row input.form-input.tc-link-description {
    flex: 1 !important;
    height: 50px !important;
    min-width: 0 !important;
    width: auto !important;
    max-width: none !important;
    box-sizing: border-box !important;
  }

  .btn-add-tc, .btn-remove-tc {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    font-weight: bold !important;
    border: none !important;
    cursor: pointer !important;
    transition: all 0.2s ease !important;
    flex-shrink: 0 !important;
    flex-grow: 0 !important;
    padding: 0 !important;
    margin: 0 !important;
    box-sizing: border-box !important;
  }

  .btn-add-tc {
    min-width: 50px !important;
    width: 50px !important;
    height: 50px !important;
    border-radius: 10px !important;
    font-size: 22px !important;
    background: linear-gradient(135deg, #28a745, #20c997) !important;
    color: white !important;
    box-shadow: 0 2px 6px rgba(40, 167, 69, 0.4) !important;
  }

  .btn-remove-tc {
    background: linear-gradient(135deg, #dc3545, #e74c3c) !important;
    color: white !important;
    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.6) !important;
    min-width: 120px !important;
    width: auto !important;
    height: 50px !important;
    font-size: 14px !important;
    border-radius: 8px !important;
    font-weight: 600 !important;
    border: 2px solid #fff !important;
    padding: 0 16px !important;
    white-space: nowrap !important;
  }

  .btn-add-tc:hover {
    background: linear-gradient(135deg, #218838, #1e7e34) !important;
    transform: scale(1.1) !important;
    box-shadow: 0 4px 8px rgba(40, 167, 69, 0.6) !important;
  }

  .btn-remove-tc:hover {
    background: linear-gradient(135deg, #c82333, #bd2130) !important;
    transform: scale(1.05) !important;
    box-shadow: 0 6px 16px rgba(220, 53, 69, 0.8) !important;
  }

  /* Colors Styles */
  .color-item {
    margin-bottom: 15px !important;
  }

  .color-row {
    display: flex !important;
    flex-direction: row !important;
    align-items: center !important;
    gap: 10px !important;
    width: 100% !important;
    flex-wrap: nowrap !important;
  }

  .color-row input.color-picker {
    flex: 0 0 80px !important;
    height: 50px !important;
    width: 80px !important;
    border: 2px solid #e5e7eb !important;
    border-radius: 10px !important;
    cursor: pointer !important;
    padding: 0 !important;
    background: none !important;
    transition: all 0.3s ease !important;
  }

  .color-row input.color-picker:focus {
    outline: none !important;
    border-color: #8b45db !important;
    box-shadow: 0 0 0 3px rgba(139, 69, 219, 0.1) !important;
    transform: translateY(-1px) !important;
  }

  .color-row input.color-description {
    flex: 1 !important;
    height: 50px !important;
    min-width: 0 !important;
    width: auto !important;
    max-width: none !important;
    box-sizing: border-box !important;
    padding: 0.875rem !important;
    border: 2px solid #e5e7eb !important;
    border-radius: 10px !important;
    font-size: 1rem !important;
    transition: all 0.3s ease !important;
    background: rgba(255, 255, 255, 0.9) !important;
    font-family: inherit !important;
  }

  .color-row input.color-description:focus {
    outline: none !important;
    border-color: #8b45db !important;
    box-shadow: 0 0 0 3px rgba(139, 69, 219, 0.1) !important;
    transform: translateY(-1px) !important;
    background: rgba(255, 255, 255, 1) !important;
  }

  .btn-add-color, .btn-remove-color {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    font-weight: bold !important;
    border: none !important;
    cursor: pointer !important;
    transition: all 0.2s ease !important;
    flex-shrink: 0 !important;
    flex-grow: 0 !important;
    padding: 0 !important;
    margin: 0 !important;
    box-sizing: border-box !important;
  }

  .btn-add-color {
    min-width: 50px !important;
    width: 50px !important;
    height: 50px !important;
    border-radius: 10px !important;
    font-size: 22px !important;
    background: linear-gradient(135deg, #6f42c1, #8e44ad) !important;
    color: white !important;
    box-shadow: 0 2px 6px rgba(111, 66, 193, 0.4) !important;
  }

  .btn-remove-color {
    background: linear-gradient(135deg, #dc3545, #e74c3c) !important;
    color: white !important;
    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.6) !important;
    min-width: 120px !important;
    width: auto !important;
    height: 50px !important;
    font-size: 14px !important;
    border-radius: 8px !important;
    font-weight: 600 !important;
    border: 2px solid #fff !important;
    padding: 0 16px !important;
    white-space: nowrap !important;
  }

  .btn-add-color:hover {
    background: linear-gradient(135deg, #5a32a3, #7d3c98) !important;
    transform: scale(1.1) !important;
    box-shadow: 0 4px 8px rgba(111, 66, 193, 0.6) !important;
  }

  .btn-remove-color:hover {
    background: linear-gradient(135deg, #c82333, #bd2130) !important;
    transform: scale(1.05) !important;
    box-shadow: 0 6px 16px rgba(220, 53, 69, 0.8) !important;
  }

  .radio-input {
    width: 1rem;
    height: 1rem;
    accent-color: #8b45db;
    margin: 0;
  }

  .radio-option:has(.radio-input:checked) {
    border-color: #8b45db;
    background: rgba(139, 69, 219, 0.1);
    color: #7c3aed;
    box-shadow: 0 2px 8px rgba(139, 69, 219, 0.2);
  }

  .form-actions {
    text-align: center;
  }

  .btn {
    background: linear-gradient(135deg, #8b45db, #7c3aed);
    color: white;
    padding: 1rem 2rem;
    border: none;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(139, 69, 219, 0.3);
    min-width: 200px;
    position: relative;
    overflow: hidden;
    font-family: inherit;
  }

  .btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(139, 69, 219, 0.4);
  }

  .btn:hover::before {
    left: 100%;
  }

  .btn:active {
    transform: translateY(0);
  }

  .btn:disabled,
  .btn.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
    background: linear-gradient(135deg, #9ca3af, #6b7280);
    box-shadow: 0 2px 8px rgba(156, 163, 175, 0.2);
    pointer-events: none;
  }

  .btn:disabled:hover,
  .btn.disabled:hover {
    transform: none;
    box-shadow: 0 2px 8px rgba(156, 163, 175, 0.2);
  }

  .btn-secondary {
    background: linear-gradient(135deg, #6b7280, #4b5563);
    box-shadow: 0 4px 15px rgba(107, 114, 128, 0.3);
  }

  .btn-secondary:hover {
    box-shadow: 0 8px 25px rgba(107, 114, 128, 0.4);
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    align-items: center;
  }

  /* File Upload Styles */
  .file-upload-container {
    position: relative;
    margin-top: 0.5rem;
  }

  .file-input {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
    overflow: hidden;
  }

  .file-upload-label {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 1.5rem;
    background: linear-gradient(135deg, #f8fafc, #e2e8f0);
    border: 2px dashed #cbd5e1;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    color: #64748b;
    font-weight: 500;
    min-height: 60px;
    justify-content: center;
  }

  .file-upload-label:hover {
    background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
    border-color: #8b45db;
    color: #8b45db;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(139, 69, 219, 0.1);
  }

  .upload-icon {
    font-size: 1.5rem;
    opacity: 0.7;
  }

  .upload-text {
    font-size: 0.95rem;
  }

  .file-list {
    margin-top: 0.75rem;
    padding: 0;
  }

  .file-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.5rem 0.75rem;
    background: rgba(139, 69, 219, 0.05);
    border: 1px solid rgba(139, 69, 219, 0.1);
    border-radius: 8px;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    color: #4c1d95;
  }

  .file-name {
    flex: 1;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .file-size {
    font-size: 0.8rem;
    color: #64748b;
    margin-left: 0.5rem;
  }

  .remove-file {
    background: none;
    border: none;
    color: #ef4444;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: background-color 0.2s ease;
  }

  .remove-file:hover {
    background-color: rgba(239, 68, 68, 0.1);
  }

  .loading {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .alert {
    padding: 1rem;
    border-radius: 10px;
    margin-top: 1rem;
    text-align: center;
    font-weight: 500;
    animation: slideInUp 0.5s ease-out;
  }

  .alert-success {
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
  }

  .alert-error {
    background: linear-gradient(135deg, #ef4444, #dc2626);
    color: white;
  }

  .success-message {
    margin-bottom: 1rem;
    font-size: 1rem;
  }

  .dev-id-highlight {
    background: rgba(255, 255, 255, 0.2);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    font-size: 1.1rem;
    font-weight: 700;
    letter-spacing: 1px;
    text-transform: uppercase;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    .brief-form-container {
      padding: 0.5rem;
    }

    .card {
      margin: 0.5rem;
      padding: 1rem;
      border-radius: 15px;
    }

    .form-title {
      font-size: 1.5rem;
    }

    .section-title {
      font-size: 1.1rem;
      margin-bottom: 1rem;
    }

    .section-title::before {
      width: 24px;
      height: 24px;
      font-size: 0.75rem;
    }

    .form-section {
      padding: 1rem;
      margin-bottom: 1.5rem;
    }

    .form-group {
      margin-bottom: 1rem;
    }

    .form-label {
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .form-input,
    .form-select,
    .form-textarea {
      font-size: 0.9rem;
      padding: 0.75rem;
    }

    .radio-group {
      flex-direction: column;
      gap: 0.75rem;
    }

    .radio-option {
      font-size: 0.9rem;
      padding: 0.625rem 0.875rem;
    }

    .btn {
      min-width: 100%;
      font-size: 0.9rem;
      padding: 0.875rem 1.5rem;
    }

    .file-upload-label {
      padding: 0.875rem 1.25rem;
      min-height: 50px;
    }

    .upload-icon {
      font-size: 1.25rem;
    }

    .upload-text {
      font-size: 0.85rem;
    }

    /* Enlaces en m√≥vil - apilados verticalmente */
    .tc-link-row {
      flex-direction: column !important;
      gap: 8px !important;
    }

    .tc-link-row input.tc-link-url,
    .tc-link-row input.form-input.tc-link-url,
    .tc-link-row input.tc-link-description,
    .tc-link-row input.form-input.tc-link-description {
      flex: none !important;
      width: 100% !important;
    }

    /* Colores en m√≥vil - apilados verticalmente */
    .color-row {
      flex-direction: column !important;
      gap: 8px !important;
    }

    .color-row input.color-picker {
      flex: none !important;
      width: 100% !important;
      height: 50px !important;
    }

    .color-row input.color-description {
      flex: none !important;
      width: 100% !important;
    }

    .btn-remove-color {
      width: 100% !important;
      min-width: auto !important;
    }
  }

  @media (max-width: 480px) {
    .brief-form-container {
      padding: 0.25rem;
    }

    .card {
      margin: 0.25rem;
      padding: 0.75rem;
      border-radius: 12px;
    }

    .form-title {
      font-size: 1.3rem;
    }

    .section-title {
      font-size: 1rem;
    }

    .section-title::before {
      width: 20px;
      height: 20px;
      font-size: 0.7rem;
    }

    .form-section {
      padding: 0.875rem;
      margin-bottom: 1.25rem;
    }

    .form-label {
      font-size: 0.85rem;
    }

    .form-input,
    .form-select,
    .form-textarea {
      font-size: 0.85rem;
      padding: 0.625rem;
    }

    .radio-option {
      font-size: 0.85rem;
      padding: 0.5rem 0.75rem;
    }

    .btn {
      font-size: 0.85rem;
      padding: 0.75rem 1.25rem;
    }

    .file-upload-label {
      padding: 0.75rem 1rem;
      min-height: 45px;
      flex-direction: column;
      gap: 0.5rem;
    }

    .upload-icon {
      font-size: 1rem;
    }

    .upload-text {
      font-size: 0.8rem;
      text-align: center;
    }

    .file-item {
      padding: 0.375rem 0.5rem;
      font-size: 0.8rem;
    }

    /* Colores en m√≥vil muy peque√±o */
    .color-row {
      flex-direction: column !important;
      gap: 8px !important;
    }

    .color-row input.color-picker {
      flex: none !important;
      width: 100% !important;
      height: 45px !important;
    }

    .color-row input.color-description {
      flex: none !important;
      width: 100% !important;
    }

    .btn-remove-color {
      width: 100% !important;
      min-width: auto !important;
      font-size: 0.85rem !important;
      padding: 0.75rem 1rem !important;
    }
  }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<script define:vars={{ t, currentLang }}>
  // Operation Type Handler
  document.addEventListener('DOMContentLoaded', function() {
    const operationRadios = document.querySelectorAll('input[name="operation_type"]');
    const devIdSection = document.getElementById('devid-section');
    const mainFormContainer = document.getElementById('main-form-container');
    const loadDataBtn = document.getElementById('load-data-btn');
    const existingDevIdInput = document.getElementById('existing_devid');
    const devIdStatus = document.getElementById('devid-status');
    
    // Handle operation type change
    if (operationRadios.length > 0) {
      operationRadios.forEach(radio => {
        radio.addEventListener('change', function() {
          if (this.value === 'modify') {
            if (devIdSection) devIdSection.style.display = 'block';
            if (mainFormContainer) mainFormContainer.style.display = 'none';
          } else {
            if (devIdSection) devIdSection.style.display = 'none';
            if (mainFormContainer) mainFormContainer.style.display = 'block';
            clearForm();
          }
          // Re-validate after tab change
          setTimeout(() => {
            if (window.validateRequiredFields) {
              window.validateRequiredFields();
            }
          }, 100);
        });
      });
    }
    
    // Handle load existing data
    if (loadDataBtn && existingDevIdInput) {
      loadDataBtn.addEventListener('click', async function() {
        const devId = existingDevIdInput.value.trim();
        if (!devId) {
          showDevIdStatus(t.existingDevIdPlaceholder, 'error');
          return;
        }
      
        // Disable button and show loading state
        const loadDataText = document.getElementById('loadDataText');
        const loadDataSpinner = document.getElementById('loadDataSpinner');
        
        loadDataBtn.disabled = true;
        if (loadDataText) loadDataText.textContent = t.generating || 'Loading...';
        if (loadDataSpinner) loadDataSpinner.style.display = 'inline-block';
      
        try {
          const response = await fetch(`/${currentLang}/api/get-brief?devId=${encodeURIComponent(devId)}`);
          const result = await response.json();
          
          if (result.success && result.data) {
            populateForm(result.data);
            mainFormContainer.style.display = 'block';
            showDevIdStatus(t.dataLoadedSuccessfully, 'success');
            // Re-validate after loading data
            setTimeout(() => {
              if (window.validateRequiredFields) {
                window.validateRequiredFields();
              }
            }, 200);
          } else {
            showDevIdStatus(t.devIdNotFound, 'error');
          }
        } catch (error) {
          console.error('Error loading data:', error);
          showDevIdStatus(t.errorLoadingData, 'error');
        } finally {
          // Re-enable button and restore original state
          loadDataBtn.disabled = false;
          if (loadDataText) loadDataText.textContent = t.loadExistingData;
          if (loadDataSpinner) loadDataSpinner.style.display = 'none';
        }
      });
    }
    
    function showDevIdStatus(message, type) {
      if (devIdStatus) {
        devIdStatus.className = `devid-status ${type}`;
        
        if (type === 'loading') {
          devIdStatus.innerHTML = `
            <div class="devid-loading-spinner"></div>
          `;
        } else if (type === 'success') {
          devIdStatus.innerHTML = `
            <div class="devid-status-icon">‚úì</div>
            <span>${message}</span>
          `;
        } else if (type === 'error') {
          devIdStatus.innerHTML = `
            <div class="devid-status-icon">‚úï</div>
            <span>${message}</span>
          `;
        } else {
          devIdStatus.textContent = message;
        }
      }
    }
    
    function clearForm() {
      const form = document.getElementById('briefForm');
      const inputs = form.querySelectorAll('input:not([name="operation_type"]), textarea, select');
      inputs.forEach(input => {
        if (input.type === 'checkbox' || input.type === 'radio') {
          input.checked = false;
        } else {
          input.value = '';
        }
      });
    }
    
    function populateForm(data) {
      if (!data) return;
      
      console.log('Populating form with data:', data);
      
      // Field mapping from database (camelCase) to form (snake_case)
      const fieldMapping = {
        'devId': 'existing_devid',
        'requesterEmail': 'requester_email',
        'jiraTaskUrl': 'jira_task_url',
        'jiraTaskKey': 'jira_task_key',
        'planType': 'plan_type',
        'flowType': 'flow_type',
        'trafficOrigin': 'traffic_origin',
        'tcLinksFormatted': 'tc_links_formatted',
        'subscriptionKeywords': 'subscription_keywords',
        'priceText': 'price_text',
        'specialFunctionalities': 'special_functionalities',
        'referenceUrl': 'reference_url'
      };
      
      // Process direct field mappings
      Object.keys(data).forEach(dbKey => {
        const formKey = fieldMapping[dbKey] || dbKey;
        const element = document.querySelector(`[name="${formKey}"]`);
        
        if (element) {
          try {
            console.log(`Setting ${formKey} (from ${dbKey}) = ${data[dbKey]} on element:`, element.tagName, element.type);
            if (element.type === 'checkbox' || element.type === 'radio') {
              element.checked = data[dbKey];
            } else if (element.tagName === 'SELECT') {
              // For select elements, ensure the value exists as an option
              const value = data[dbKey] || '';
              const optionExists = Array.from(element.options).some(option => option.value === value);
              if (optionExists || value === '') {
                element.value = value;
                console.log(`Successfully set select ${formKey} to ${value}`);
              } else {
                console.warn(`Option '${value}' not found for select ${formKey}. Available options:`, Array.from(element.options).map(o => o.value));
                element.value = ''; // Reset to default
              }
            } else {
              element.value = data[dbKey] || '';
            }
          } catch (error) {
            console.warn(`Error setting value for ${formKey}:`, error);
          }
        } else {
          console.warn(`Element not found for field: ${formKey} (from ${dbKey})`);
        }
      });
      
      // Make requester email readonly and gray when data is loaded
      const requesterEmailField = document.querySelector('[name="requester_email"]');
      if (requesterEmailField && data.requesterEmail) {
        requesterEmailField.readOnly = true;
        requesterEmailField.style.backgroundColor = '#f5f5f5';
        requesterEmailField.style.cursor = 'not-allowed';
        requesterEmailField.style.color = '#666';
      }
      
      // Handle array fields
      if (data.tcLinks && data.tcDescriptions) {
        populateArrayFields('tc_links', data.tcLinks, data.tcDescriptions);
      }
      if (data.colors && data.colorDescriptions) {
        populateArrayFields('colors', data.colors, data.colorDescriptions);
      }
    }
    
    function populateArrayFields(fieldType, values, descriptions) {
      if (fieldType === 'tc_links') {
        const container = document.getElementById('tc-links-container');
        if (!container) return;
        
        // Clear existing items except the first one
        const items = container.querySelectorAll('.tc-link-item');
        for (let i = 1; i < items.length; i++) {
          items[i].remove();
        }
        
        // Populate data
        const valuesArray = Array.isArray(values) ? values : (values ? values.split(',') : []);
        const descriptionsArray = Array.isArray(descriptions) ? descriptions : (descriptions ? descriptions.split(',') : []);
        
        for (let i = 0; i < valuesArray.length; i++) {
          if (i === 0) {
            // Use first existing item
            const firstItem = container.querySelector('.tc-link-item');
            if (firstItem) {
              const urlInput = firstItem.querySelector('input[name="tc_links[]"]');
              const descInput = firstItem.querySelector('input[name="tc_descriptions[]"]');
              if (urlInput) urlInput.value = valuesArray[i] || '';
              if (descInput) descInput.value = descriptionsArray[i] || '';
            }
          } else {
            // Add new items
            window.addTcLink();
            const newItem = container.lastElementChild;
            const urlInput = newItem.querySelector('input[name="tc_links[]"]');
            const descInput = newItem.querySelector('input[name="tc_descriptions[]"]');
            if (urlInput) urlInput.value = valuesArray[i] || '';
            if (descInput) descInput.value = descriptionsArray[i] || '';
          }
        }
      } else if (fieldType === 'colors') {
        const container = document.getElementById('colors-container');
        if (!container) return;
        
        // Clear existing items except the first one
        const items = container.querySelectorAll('.color-item');
        for (let i = 1; i < items.length; i++) {
          items[i].remove();
        }
        
        // Populate data
        const valuesArray = Array.isArray(values) ? values : (values ? values.split(',') : []);
        const descriptionsArray = Array.isArray(descriptions) ? descriptions : (descriptions ? descriptions.split(',') : []);
        
        for (let i = 0; i < valuesArray.length; i++) {
          if (i === 0) {
            // Use first existing item
            const firstItem = container.querySelector('.color-item');
            if (firstItem) {
              const colorInput = firstItem.querySelector('input[name="colors[]"]');
              const descInput = firstItem.querySelector('input[name="color_descriptions[]"]');
              if (colorInput) colorInput.value = valuesArray[i] || '#000000';
              if (descInput) descInput.value = descriptionsArray[i] || '';
            }
          } else {
            // Add new items
            window.addColor();
            const newItem = container.lastElementChild;
            const colorInput = newItem.querySelector('input[name="colors[]"]');
            const descInput = newItem.querySelector('input[name="color_descriptions[]"]');
            if (colorInput) colorInput.value = valuesArray[i] || '#000000';
            if (descInput) descInput.value = descriptionsArray[i] || '';
          }
        }
      }
    }
    
    // Mostrar campo Jira Task Key si existe
    if (data.jiraTaskKey) {
      const jiraTaskKeyGroup = document.getElementById('jira-task-key-group');
      if (jiraTaskKeyGroup) {
        jiraTaskKeyGroup.style.display = 'block';
      }
    }
  });
  
  // PDF Generation function
  async function generateAndDownloadPDF(briefData, devId) {
    try {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();
      
      // Set font
      doc.setFont('helvetica');
      
      // Title and DevID
      doc.setFontSize(20);
      doc.text(`LP Req: ${devId}-${briefData.country || 'N/A'}-${briefData.product || 'N/A'}`, 20, 30);
      
      doc.setFontSize(14);
      doc.text(`DevID: ${devId}`, 20, 45);
      doc.text(`${t.languageSelector}: ${currentLang.toUpperCase()}`, 20, 55);
      doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 65);
      
      let yPosition = 80;
      const lineHeight = 10;
      const pageHeight = 280;
      
      // Helper function to add text with page break
      function addText(label, value, isMultiline = false) {
        if (yPosition > pageHeight) {
          doc.addPage();
          yPosition = 20;
        }
        
        // Convert value to string to avoid type errors
        const stringValue = String(value || 'N/A');
        
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.text(label + ':', 20, yPosition);
        
        doc.setFont('helvetica', 'normal');
        if (isMultiline && stringValue.includes('<br>')) {
          const lines = stringValue.replace(/<br>/g, '\n').split('\n');
          yPosition += lineHeight;
          lines.forEach(line => {
            if (yPosition > pageHeight) {
              doc.addPage();
              yPosition = 20;
            }
            doc.text(line.trim(), 25, yPosition);
            yPosition += lineHeight;
          });
        } else {
          const cleanValue = stringValue.replace(/<br>/g, ' ');
          const splitText = doc.splitTextToSize(cleanValue, 160);
          yPosition += lineHeight;
          splitText.forEach(line => {
            if (yPosition > pageHeight) {
              doc.addPage();
              yPosition = 20;
            }
            doc.text(line, 25, yPosition);
            yPosition += lineHeight;
          });
        }
        yPosition += 5;
      }
      
      // Add form data
      addText(t.requesterName, briefData.requester_email || 'N/A');

      addText(t.country, briefData.country || 'N/A');
      addText(t.carriers, briefData.carriers || 'N/A');
      addText(t.product, briefData.product || 'N/A');
      addText(t.flowType, briefData.flow_type || 'N/A');
      addText(t.trafficOrigin, briefData.traffic_origin || 'N/A');
      addText(t.planType, briefData.plan_type || 'N/A');
      addText(t.copies, briefData.copies || 'N/A', true);
      addText(t.tcLinks, briefData.tc_links_formatted || 'N/A');
      addText(t.languages, briefData.languages || 'N/A');
      addText(t.subscriptionKeywords, briefData.subscription_keywords || 'N/A');
      addText(t.priceText, briefData.price_text || 'N/A');

      addText(t.images, briefData.images || 'N/A', true);
      addText(t.logos, briefData.logos || 'N/A', true);

      addText(t.specialFunctionalities, briefData.special_functionalities || 'N/A', true);
      addText(t.colors, briefData.colors_formatted || 'N/A', true);
      addText('Reference URL', briefData.reference_url || 'N/A');
      addText('Reference Image', briefData.reference_image ? 'Uploaded' : 'N/A');
      addText('Guidelines Document', briefData.guidelines_document ? 'Uploaded' : 'N/A');
      
      // Save PDF
      const country = briefData.country || 'N-A';
      const product = briefData.product || 'N-A';
      const requesterName = briefData.requester_email || 'N-A';
      doc.save(`LP Req ${devId}-${country}-${product}-${requesterName}.pdf`);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert(t.errorGeneratingPdf);
    }
  }

  // T&C Links functionality - Global functions
  window.addTcLink = function() {
    const container = document.getElementById('tc-links-container');
    const newItem = document.createElement('div');
    newItem.className = 'tc-link-item';
    newItem.innerHTML = `
      <div class="tc-link-row">
        <input type="url" name="tc_links[]" class="form-input tc-link-url" placeholder={t.tcLinkUrlPlaceholder}>
        <input type="text" name="tc_descriptions[]" class="form-input tc-link-description" placeholder={t.linkDescription}>
        <button type="button" class="btn-remove-tc" onclick="removeTcLink(this)">{t.remove}</button>
      </div>
    `;
    container.appendChild(newItem);
  }

  window.removeTcLink = function(button) {
    const item = button.closest('.tc-link-item');
    item.remove();
  }

  // Colors functionality - Global functions
  window.addColor = function() {
    const container = document.getElementById('colors-container');
    const newItem = document.createElement('div');
    newItem.className = 'color-item';
    newItem.innerHTML = `
      <div class="color-row">
        <input type="color" name="colors[]" class="color-picker" value="#000000">
        <input type="text" name="color_descriptions[]" class="color-description" placeholder="${t.colorDescriptionPlaceholder}">
        <button type="button" class="btn-remove-color" onclick="removeColor(this)">{t.remove}</button>
      </div>
    `;
    container.appendChild(newItem);
  }

  window.removeColor = function(button) {
    const item = button.closest('.color-item');
    item.remove();
  }

  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('briefForm');
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const alertContainer = document.getElementById('alertContainer');

    // Function to validate required fields and update submit button state
    function validateRequiredFields() {
      const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');
      let allValid = true;
      
      requiredFields.forEach(field => {
        if (!field.value.trim()) {
          allValid = false;
        }
      });
      
      // Update submit button state
      if (allValid) {
        submitBtn.disabled = false;
        submitBtn.classList.remove('disabled');
      } else {
        submitBtn.disabled = true;
        submitBtn.classList.add('disabled');
      }
    }

    // Make validateRequiredFields globally accessible
    window.validateRequiredFields = validateRequiredFields;

    // Add event listeners to all required fields
    const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');
    requiredFields.forEach(field => {
      field.addEventListener('input', validateRequiredFields);
      field.addEventListener('change', validateRequiredFields);
    });

    // Initial validation on page load
    validateRequiredFields();

    function showAlert(message, type) {
      alertContainer.innerHTML = `<div class="alert alert-${type}">${message}</div>`;
      alertContainer.style.display = 'block';
      alertContainer.scrollIntoView({ behavior: 'smooth' });
    }

    function showSuccessWithDevId(message, devId) {
      alertContainer.innerHTML = `
        <div class="alert alert-success">
          <div class="success-message">${message}</div>
          <div class="dev-id-highlight">
            <strong>DevID: ${devId}</strong>
          </div>
        </div>
      `;
      alertContainer.style.display = 'block';
      alertContainer.scrollIntoView({ behavior: 'smooth' });
    }

    function setLoading(loading) {
      if (loading) {
        submitBtn.disabled = true;
        submitText.textContent = t.generating;
        loadingSpinner.style.display = 'inline-block';
      } else {
        submitText.textContent = t.generateBrief;
        loadingSpinner.style.display = 'none';
        // Re-validate after loading to restore proper button state
        validateRequiredFields();
      }
    }

    function setSaveLoading(loading) {
      const saveBtn = document.getElementById('saveBtn');
      const saveText = document.getElementById('saveText');
      const saveLoadingSpinner = document.getElementById('saveLoadingSpinner');
      
      if (loading) {
        saveBtn.disabled = true;
        saveText.textContent = 'Saving...';
        saveLoadingSpinner.style.display = 'inline-block';
      } else {
        saveBtn.disabled = false;
        saveText.textContent = t.saveChanges;
        saveLoadingSpinner.style.display = 'none';
      }
    }

    // Save Changes button functionality
    document.getElementById('saveBtn').addEventListener('click', async function(e) {
      e.preventDefault();
      
      // Validate requester email is filled
      const requesterEmailField = document.querySelector('[name="requester_email"]');
      if (!requesterEmailField || !requesterEmailField.value.trim()) {
        showAlert(t.requesterEmailRequired, 'error');
        return;
      }
      
      setSaveLoading(true);
      alertContainer.style.display = 'none';

      try {
        const formData = new FormData(form);
        
        const response = await fetch(`/${currentLang}/api/save-brief`, {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          showSuccessWithDevId('Request saved successfully! DevID has been sent to your email.', result.devId);
        } else {
          showAlert(result.message || 'Error saving request', 'error');
        }
      } catch (error) {
        console.error('Error:', error);
        showAlert('Error saving request. Please try again.', 'error');
      } finally {
        setSaveLoading(false);
      }
    });


    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Debug: Check file inputs before creating FormData
      console.log('Frontend: Form submission started');
      const fileInputs = ['images', 'logos', 'reference_image', 'guidelines_document', 'banners'];
      fileInputs.forEach(inputId => {
        const input = document.getElementById(inputId);
        if (input && input.files) {
          console.log(`Frontend: Input ${inputId} has ${input.files.length} files:`, Array.from(input.files).map(f => f.name));
        }
      });
      
      setLoading(true);
      alertContainer.style.display = 'none';

      try {
        const formData = new FormData(form);
        
        // Convert FormData to object
        const briefData = {};
        
        // Handle regular fields and files separately
        for (const [key, value] of formData.entries()) {
          if (value instanceof File) {
            // Handle file fields - store file names instead of File objects
            if (!briefData[key]) {
              briefData[key] = [];
            }
            if (Array.isArray(briefData[key])) {
              briefData[key].push(value.name);
            } else {
              briefData[key] = [briefData[key], value.name];
            }
          } else {
            // Handle array fields (like colors[], color_descriptions[], tc_links[], etc.)
            if (key.endsWith('[]')) {
              const cleanKey = key.replace('[]', '');
              if (!briefData[cleanKey]) {
                briefData[cleanKey] = [];
              }
              briefData[cleanKey].push(value);
            } else {
              briefData[key] = value;
            }
          }
        }
        
        // Convert file arrays to readable strings
        ['banners', 'images', 'logos'].forEach(field => {
          if (briefData[field] && Array.isArray(briefData[field]) && briefData[field].length > 0) {
            briefData[field] = briefData[field].join(', ');
          } else {
            briefData[field] = 'N/A';
          }
        });
        
        // Handle single file fields
        ['reference_image', 'guidelines_document'].forEach(field => {
          if (briefData[field] && Array.isArray(briefData[field])) {
            briefData[field] = briefData[field][0] || 'N/A';
          }
        });
        
        // Process colors data
        if (briefData.colors && briefData.color_descriptions) {
          const colorEntries = [];
          for (let i = 0; i < briefData.colors.length; i++) {
            if (briefData.colors[i] && briefData.color_descriptions[i]) {
              colorEntries.push(`${briefData.colors[i]} - ${briefData.color_descriptions[i]}`);
            }
          }
          briefData.colors_formatted = colorEntries.length > 0 ? colorEntries.join(', ') : 'N/A';
        } else {
          briefData.colors_formatted = 'N/A';
        }
        
        // Process TC links data
        if (briefData.tc_links && briefData.tc_descriptions) {
          const tcEntries = [];
          for (let i = 0; i < briefData.tc_links.length; i++) {
            if (briefData.tc_links[i] && briefData.tc_descriptions[i]) {
              tcEntries.push(`${briefData.tc_descriptions[i]}: ${briefData.tc_links[i]}`);
            }
          }
          briefData.tc_links_formatted = tcEntries.length > 0 ? tcEntries.join(', ') : 'N/A';
        } else {
          briefData.tc_links_formatted = 'N/A';
        }

        // Add language info
        briefData.language = currentLang;

        // Create FormData to send files
        const submitFormData = new FormData();
        
        // Add all text fields
        Object.keys(briefData).forEach(key => {
          if (key !== 'reference_image' && key !== 'guidelines_document' && key !== 'banners' && key !== 'images' && key !== 'logos') {
            if (Array.isArray(briefData[key])) {
              briefData[key].forEach(value => {
                submitFormData.append(key + '[]', value);
              });
            } else {
              submitFormData.append(key, briefData[key]);
            }
          }
        });
        
        // Add files from global storage
        const fileInputs = ['images', 'logos', 'reference_image', 'guidelines_document', 'banners'];
        console.log('Frontend: Adding files from global storage...');
        
        fileInputs.forEach(inputId => {
          const files = window.fileStorage && window.fileStorage[inputId] ? window.fileStorage[inputId] : [];
          if (files.length > 0) {
            console.log(`Frontend: Found ${files.length} files in ${inputId} storage`);
            files.forEach((file, index) => {
              console.log(`Frontend: Adding file ${inputId}[${index}] = ${file.name} (${file.size} bytes)`);
              submitFormData.append(inputId, file);
            });
          } else {
            console.log(`Frontend: No files found in ${inputId} storage`);
          }
        });
        
        // Debug: Log all FormData entries
        console.log('Frontend: All FormData entries:');
        for (const [key, value] of submitFormData.entries()) {
          if (value instanceof File) {
            console.log(`  ${key}: ${value.name} (${value.size} bytes)`);
          } else {
            console.log(`  ${key}: ${value}`);
          }
        }

        const response = await fetch(`/${currentLang}/api/send-brief`, {
          method: 'POST',
          body: submitFormData
        });

        const result = await response.json();

        if (response.ok) {
          showSuccessWithDevId(t.successMessage, result.devId);
          
          // Generate and download PDF
          await generateAndDownloadPDF(briefData, result.devId);
          
          form.reset();
        } else {
          showAlert(result.error || t.errorMessage, 'error');
        }
      } catch (error) {
        console.error('Error:', error);
        showAlert(t.errorMessage, 'error');
      } finally {
        setLoading(false);
      }
    });

    // Global file storage
    window.fileStorage = window.fileStorage || {};

    // File upload functionality
    function setupFileUpload(inputId, listId) {
      const fileInput = document.getElementById(inputId);
      const fileList = document.getElementById(listId);
      const statusElement = document.getElementById(inputId + '-status');
      let selectedFiles = [];
      
      // Store reference globally
      window.fileStorage[inputId] = selectedFiles;

      if (!fileInput || !fileList) {
        return;
      }

      fileInput.addEventListener('change', function(e) {
        const newFiles = Array.from(e.target.files);
        selectedFiles = [...selectedFiles, ...newFiles];
        // Update global storage
        window.fileStorage[inputId] = selectedFiles;
        console.log(`Frontend: Updated ${inputId} storage with ${selectedFiles.length} files:`, selectedFiles.map(f => f.name));
        updateFileList();
        // Clear the input to allow selecting the same file again
        e.target.value = '';
      });

      function updateFileList() {
        
        // Update status element
        if (statusElement) {
          if (selectedFiles.length > 0) {
            const fileNames = selectedFiles.map(file => file.name).join(', ');
            statusElement.textContent = `‚úì ${selectedFiles.length} ${t.filesSelected}: ${fileNames}`;
            statusElement.style.display = 'block';
          } else {
            statusElement.style.display = 'none';
          }
        }
        
        fileList.innerHTML = '';
        selectedFiles.forEach((file, index) => {
          const fileItem = document.createElement('div');
          fileItem.className = 'file-item';
          
          const fileName = document.createElement('span');
          fileName.className = 'file-name';
          fileName.textContent = file.name;
          
          const fileSize = document.createElement('span');
          fileSize.className = 'file-size';
          fileSize.textContent = formatFileSize(file.size);
          
          const removeBtn = document.createElement('button');
          removeBtn.className = 'remove-file';
          removeBtn.innerHTML = '‚úï';
          removeBtn.type = 'button';
          removeBtn.addEventListener('click', () => {
            selectedFiles.splice(index, 1);
            // Update global storage
            window.fileStorage[inputId] = selectedFiles;
            console.log(`Frontend: Removed file from ${inputId}, now has ${selectedFiles.length} files`);
            updateFileList();
          });
          
          fileItem.appendChild(fileName);
          fileItem.appendChild(fileSize);
          fileItem.appendChild(removeBtn);
          fileList.appendChild(fileItem);
        });
        
        // Update the actual input files
        updateInputFiles();
      }

      function updateInputFiles() {
        const dt = new DataTransfer();
        selectedFiles.forEach(file => dt.items.add(file));
        fileInput.files = dt.files;
        console.log(`Frontend: Updated ${inputId} with ${selectedFiles.length} files:`, selectedFiles.map(f => f.name));
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }
    }

    // Initialize file uploads
    setupFileUpload('banners', 'banners-list');
    setupFileUpload('images', 'images-list');
    setupFileUpload('logos', 'logos-list');
    setupFileUpload('reference_image', 'reference-image-list');
    setupFileUpload('guidelines_document', 'guidelines-document-list');

    // Jira link smooth scroll functionality
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('jira-link')) {
        e.preventDefault();
        const targetId = e.target.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
          });
          // Add a subtle highlight effect
          targetElement.style.transition = 'box-shadow 0.3s ease';
          targetElement.style.boxShadow = '0 0 0 3px rgba(59, 130, 246, 0.3)';
          setTimeout(() => {
            targetElement.style.boxShadow = '';
          }, 2000);
        }
      }
    });


  });
</script>